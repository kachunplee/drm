#!/usr/bin/perl

use strict;

use FileHandle;
use IPC::Open2;

use drmdef;

require "drmspell.ph";

my $maildir = '/var/local/mail/';
my $globdir = '/var/local/mail/@GLOBAL';

my $debug = 0;

while($ARGV[0] eq '-d')
{
	shift;
	$debug++;
}

my $isHTML = 0;
if ($ARGV[0] eq '-html')
{
	$isHTML = 1;
}

#
my $userid = $ENV{REMOTE_USER};

my $globf = $globdir . '/aspell';
CheckDictionary($globdir, $globf, $DICTSERVER,
	GetDictDataDir($MASTERID) . 'global/aspell');
$globf .= '.per';
$globf = -f $globf ? '--extra-dicts=' . $globf : '';

my $dctfdir = $maildir . $userid;
my $dctf = $dctfdir . '/aspell';
CheckDictionary($dctfdir, $dctf, $DRNSERVER,
		GetDictDataDir($MASTERID) . "user/$userid/aspell");
$dctf .= '.per';
$dctf = -f $dctf ? '-p ' . $dctf : '';

$| = 1;
my $spellprog = "set -x; /var/local/bin/aspell --repl /var/local/etc/httpd/.aspell.prepl $globf $dctf -a";

print "Content-type: text/plain\n\n";

my $inbuf;
read(STDIN, $inbuf, $ENV{'CONTENT_LENGTH'});

my @line = split(/\r*\n/, $inbuf);

my @phase;
my $n = 0;
foreach my $ln (@line)
{
	push @phase, $isHTML ? "\n" : "<br>" if $n++ > 0;

	if (!$isHTML)
	{
		if ($ln =~ /^>/)
		{
			# Quote - no check
			OutText($ln);
			next;
		}
	}

	CheckLine($ln);
}

print "\n";		# Out empty to separate from spell errors
foreach my $p (@phase)
{
	print $p;
}

exit (0);


sub OutText
{
	foreach my $l (@_)
	{
		if (not $isHTML)
		{
			$l =~ s/&/&amp;/g;
			$l =~ s/</&lt;/g;
			$l =~ s/>/&gt;/g;
			$l =~ s/  / &nbsp;/g;
		}
		push @phase, $l;
	}
}

my $checker;
my $nSpellErr = 0;

my $isInBracket = 0;

sub CheckLine
{
	my ($phase) = @_;

	return CheckPhase($phase) if ! $isHTML;
		
	# phase <..xxx..> phase &..; phase etc
	while($phase ne "")
	{
		if ($isInBracket)
		{
			if ($phase =~ /^([^>]*>)(.*)$/)
			{
				push @phase, $1;
				$phase = $2;
				$isInBracket = 0;
				next;
			}

			# No end bracket - take the whole piece
			push @phase, $phase;
			last;
		}

		if ($phase =~ /^([^<&]*)([<&].*)$/)
		{
			$phase = $2;
			CheckPhase($1);	  # check the phase in front of [<&]
			
			if ($phase =~ /^&/)
			{
				# &xxx;
				if ($phase =~ /^([^;]+;)(.*)$/)
				{
					push @phase, $1;
					$phase = $2;
				}
				else
				{
					push @phase, "&";
					$phase = substr($phase, 1);
				}

			}
			elsif ($phase =~ /^</)
			{
				# <xxxx...xxx>
				$isInBracket = 1;
			}
		}
		else
		{
			# No [<&] - just check rest of line and done
			CheckPhase($phase);
			last;
		}
	}
}

sub CheckPhase
{
	my ($phase) = @_;

	return if $phase eq '';

	if ($phase =~ /^\s*$/)
	{
		push @phase, $phase;
		return;
	}

	if ($checker eq '')
	{
		# open pipe to spell prog
		my $pid = open2( \*Reader, \*Writer, $spellprog);

		$checker = <Reader>;
		print STDERR $userid, ' ', $checker, "\n" if $debug;
	}

	# send line to spell checker
	print STDERR 'ln=', $phase, "\n" if $debug;
	print Writer "^", $phase, "\n";

	my $prev = 0;
	while((my $result = <Reader>) ne "\n")
	{
		print STDERR $result if $debug > 1;

		#
		# * = Good word
		# & badword suggs pos
		# # badword pos
		# ? ?
		#
		if ($result =~ /^[#&?]/)
		{
			chomp $result;
			my ($head, $sugg) = split(/: /, $result);
			my ($cmd, $word, $nSugg, $pos) = split(/ /, $head);

			if($cmd eq '#')
			{
				$pos = $nSugg;
				$nSugg = 0;
			}


			my $i = $pos - 1 - $prev;
			print STDERR 'prev = ', $prev, ' out = ', $i,
				' pos = ', $pos, ' ', substr($phase, 0, $i), "\n"
					if $debug;

			my $txt = substr($phase, 0, $i);
			OutText($txt) if($i > 0);
			push @phase, '<span class="spellerror" id="spellerr_',
				$nSpellErr++, '">', $word, '</span>';

			$sugg =~ s/\s*,\s*/ /g;
			print $word, ' ',  $sugg, "\n";

			$i += length($word);
			$prev += $i;

			print STDERR "i = ", $i, ' ', $phase, "\n" if $debug;
			$phase = substr($phase, $i);
			print STDERR $phase, "\n" if $debug;
		}
	}

	OutText($phase);
}
